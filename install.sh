#!/bin/sh
# This file is setup to modify the .login or .bash_profile
# file in the user's home directory
#
# It backs up the previous .login file as
# .login.bak and .bash_profile as .bash_profile.bak

# query user input for install
echo "This will setup Andrew's sane lab dotfiles."
read -p "Continue? [y/N]: " vcontinue
if [[ $vcontinue == "Y" ]]; then
  vcontinue="y"
fi
[[ $vcontinue != "y" ]] && echo "Quitting... Not installed." && exit 0

# Get the current shell type
export CURRENTSHELL=${SHELL}

# define csh .login modifier function
csh_login_install() {
  # generates a new .login file; injecting our custom startup script that we will generate soon
  echo "Making new .login file..."
  head -n 1 ~/.login > ~/.login.new
  echo "#!@$%^&*" >> ~/.login.new
  echo "### AUTOMATICALLY GENERATED BY ANDREW'S SANE LAB DOTFILES SCRIPT ###" >> ~/.login.new
  echo "source ~/.dotfiles/startup.csh" >> ~/.login.new
  echo "### YOU CAN DELETE THESE LINES IF YOU WANT TO UNINSTALL THIS ###" >> ~/.login.new
  tail -n +2 .login >> ~/.login.new
  # replace new login to .login
  mv ~/.login.new ~/.login
}

# define bash profile modifier function
bash_profile_install() {
  echo "hello"
}

# For csh install
if [[ ${CURRENTSHELL} == "/bin/csh" || ${CURRENTSHELL} == "/bin/tcsh" ]]; then
  # copy the current login file if it exists
  if [ -f ~/.login ]; then # for csh
    echo "Detecting existing .login file..."
    # check if the login file has already been modified with a previous install
    if [[ $(grep \#!@$%^&* ~/.login) == "#!@$%^&*" ]]; then
      echo "This .login file has already been modified. Skipping script injection..."
    else
      echo "Backing up old .login file..."
      # make copy of .login for backup
      cp ~/.login ~/.login.bak
      # modify .login
      csh_login_install
    fi
  else # no current .login file exists
    # make a new .login file
    touch ~/.login
    echo "#!/bin/csh" >> ~/.login
    # modify .login
    csh_login_install
  fi
elif [[ ${CURRENTSHELL} == "/bin/bash" || ${CURRENTSHELL} == "/bin/sh" ]]; then # For Bash
  echo "test"
elif [[ ${CURRENTSHELL} == "/bin/zsh" ]]; then
  echo "test"
else # Other shells
  echo "Unknown shell detected. Quitting installation..."
fi

# change to home directory
echo "Adding in zsh plugins..."
pushd ~
# git clone the lab dotfile repo if not exist; otherwise just pull
if [ -f ~/.dotfiles ]; then
  pushd ~/.dotfiles
  git pull
  popd
else
  git clone https://gitlab.com/DosenbachGreene/dotfiles.git ~/.dotfiles
fi
# clone oh-my-zsh
git clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh
# clone theme
pushd ~/.oh-my-zsh/custom/themes
git clone https://github.com/romkatv/powerlevel10k.git
popd
# clone plugins
pushd ~/.oh-my-zsh/custom/plugins
git clone https://github.com/zsh-users/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git
popd
# now copy over the zshrc to home if it already does not exist
[ -f ~/.zshrc ] && cp ~/.dotfiles/zshrc ~/.zshrc
popd

echo "Install Complete."
echo "Login then logout to see the new changes."
